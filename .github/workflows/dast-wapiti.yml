name: 03 - DAST Wapiti Scan

on:
  workflow_dispatch:
    inputs:
      image-tag:
        type: string
        description: "The name of the docker image to scan"
        required: true

  workflow_call:
    inputs:
      image-tag:
        type: string
        description: "The name of the docker image to scan"
        required: true
env:
  # used for docker
  REGISTRY: ghcr.io
  IMAGE_TAG: ${{ inputs.image-tag || github.event.inputs.image-tag }}

jobs:
  dast-wapiti:
    name: Wapiti DAST Scan
    runs-on: self-hosted
    steps:
      - name: checkout repository
        uses: actions/checkout@v3

      - name: log in to the Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - run: docker network create nodegoat_network

      - run: docker rm mongo | true && docker run -d --name mongo -p 27017:27017 -u mongodb --network nodegoat_network --name mongo mongo:4.4

      - run: docker rm nodegoat | true && docker run -d --network nodegoat_network --name nodegoat -p 4000:4000 -e NODE_ENV -e MONGODB_URI=mongodb://mongo:27017/nodegoat ${{ env.IMAGE_TAG }} sh -c "until nc -z -w 2 mongo 27017 && echo 'mongo is ready for connections' && node artifacts/db-reset.js && npm start; do sleep 2; done"

      - name: wait for container to start
        run: timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:4000)" != "302" ]]; do sleep 5; done' || false

      - name: test container
        run: curl -s localhost:4000/

      - name: prepare environment
        run: |
          echo "START_DATE=$(date +'%d-%m-%YT%H-%M-%S-%Z')" >> $GITHUB_ENV
          echo "START_TIMESTAMP=$(date +'%s')" >> $GITHUB_ENV
          TMP_TARGET="http://localhost:4000"
          echo "TARGET=$TMP_TARGET" >> $GITHUB_ENV

      - name: run Wapiti scan
        run: python3 wapiti/bin/wapiti -u 'http://localhost:4000' -dr -o 'dast_wapiti_report.html'

      - name: upload scan report
        uses: actions/upload-artifact@v3
        with:
          name: dast_wapiti_report.html
          path: scan.html

      - name: stop docker
        if: always()
        run: >-
          docker stop nodegoat &&
          docker stop mongo &&
          docker rm nodegoat &&
          docker rm mongo &&
          docker network remove nodegoat_network &&
          docker container prune --force &&
          docker image prune --force
